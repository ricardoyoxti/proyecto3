# .github/workflows/deploy-odoo-gcp.yml
name: üöÄ Deploy Odoo 18 to Google Cloud

on:
  workflow_dispatch:
    inputs:
      instance_name:
        description: 'Nombre base de la instancia (se a√±adir√° timestamp √∫nico)'
        required: false
        default: 'odoo'
      machine_type:
        description: 'Tipo de m√°quina'
        required: true
        default: 'e2-small'
        type: choice
        options:
        - 'e2-micro'
        - 'e2-small'
        - 'e2-medium'
        - 'e2-standard-2'
        - 'e2-standard-4'
      zone:
        description: 'Zona de GCP'
        required: true
        default: 'us-central1-a'
        type: choice
        options:
        - 'southamerica-west1-a'
        - 'us-central1-a'
      disk_size:
        description: 'Tama√±o del disco (GB)'
        required: true
        default: '20'
      auto_delete:
        description: 'Auto-eliminar instancia despu√©s de X horas (0 = no eliminar)'
        required: false
        default: '0'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîê Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: ‚òÅÔ∏è Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: üè∑Ô∏è Generate instance name
      id: generate_name
      run: |
        BASE_NAME="${{ github.event.inputs.instance_name }}"
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        INSTANCE_NAME="${BASE_NAME}-${TIMESTAMP}"
        
        # Validar nombre de instancia (solo letras min√∫sculas, n√∫meros y guiones)
        if [[ ! $INSTANCE_NAME =~ ^[a-z0-9-]+$ ]]; then
          echo "‚ùå Error: El nombre de la instancia solo puede contener letras min√∫sculas, n√∫meros y guiones"
          exit 1
        fi
        
        echo "INSTANCE_NAME=$INSTANCE_NAME" >> $GITHUB_OUTPUT
        echo "BASE_NAME=$BASE_NAME" >> $GITHUB_OUTPUT
        echo "üèóÔ∏è Nombre de instancia generado: $INSTANCE_NAME"

    - name: üìù Create startup script
      run: |
        # Crear script de instalaci√≥n mejorado
        cat > /tmp/install_odoo.sh << 'SCRIPT_EOF'
        #!/bin/bash

        # Script de instalaci√≥n de Odoo 18 Community con PostgreSQL
        # Compatible con Ubuntu 20.04/22.04 y Debian 11/12
        # Autor: Script de instalaci√≥n automatizada

        set -e  # Salir si hay alg√∫n error

        # Configurar logging
        LOG_FILE="/var/log/odoo-install.log"
        exec > >(tee -a $LOG_FILE)
        exec 2>&1

        # Funci√≥n para mostrar mensajes
        print_message() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] $1"
        }

        print_warning() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [WARNING] $1"
        }

        print_error() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] $1"
        }

        print_step() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [STEP] $1"
        }

        # Configuraci√≥n por defecto
        ODOO_USER="odoo"
        ODOO_HOME="/opt/odoo"
        ODOO_VERSION="18.0"
        ODOO_CONFIG_FILE="/etc/odoo/odoo.conf"
        ODOO_LOG_DIR="/var/log/odoo"
        ODOO_DATA_DIR="/var/lib/odoo"
        POSTGRESQL_VERSION="15"
        ODOO_PORT="8069"
        ODOO_LONGPOLL_PORT="8072"

        # Funci√≥n para detectar el sistema operativo
        detect_os() {
            if [[ -f /etc/os-release ]]; then
                . /etc/os-release
                OS=$NAME
                VER=$VERSION_ID
            else
                print_error "No se puede detectar el sistema operativo"
                exit 1
            fi
            print_message "Sistema detectado: $OS $VER"
        }

        # Funci√≥n para verificar si el usuario es root
        check_root() {
            if [[ $EUID -ne 0 ]]; then
                print_error "Este script debe ejecutarse como root"
                exit 1
            fi
        }

        # Funci√≥n para actualizar el sistema
        update_system() {
            print_step "Actualizando el sistema..."
            export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get upgrade -y
            print_message "Sistema actualizado correctamente"
        }

        # Funci√≥n para instalar dependencias b√°sicas
        install_basic_dependencies() {
            print_step "Instalando dependencias b√°sicas..."
            export DEBIAN_FRONTEND=noninteractive
            apt-get install -y \
                wget \
                curl \
                gnupg2 \
                software-properties-common \
                apt-transport-https \
                ca-certificates \
                lsb-release \
                git \
                build-essential \
                python3-dev \
                python3-pip \
                python3-venv \
                python3-wheel \
                libxml2-dev \
                libxslt1-dev \
                libevent-dev \
                libsasl2-dev \
                libldap2-dev \
                libpq-dev \
                libpng-dev \
                libjpeg-dev \
                libfreetype6-dev \
                zlib1g-dev \
                libgeoip-dev \
                python3-setuptools \
                node-less \
                npm \
                xz-utils \
                fontconfig \
                libfontconfig1 \
                wkhtmltopdf \
                supervisor
            
            print_message "Dependencias b√°sicas instaladas"
        }

        # Funci√≥n para instalar PostgreSQL
        install_postgresql() {
            print_step "Instalando PostgreSQL $POSTGRESQL_VERSION..."
            
            # Agregar repositorio oficial de PostgreSQL
            curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor -o /usr/share/keyrings/postgresql-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/postgresql-keyring.gpg] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list
            
            apt-get update
            apt-get install -y postgresql-$POSTGRESQL_VERSION postgresql-client-$POSTGRESQL_VERSION postgresql-contrib-$POSTGRESQL_VERSION
            
            # Iniciar y habilitar PostgreSQL
            systemctl start postgresql
            systemctl enable postgresql
            
            print_message "PostgreSQL instalado y configurado"
        }

        # Funci√≥n para configurar PostgreSQL para Odoo
        configure_postgresql_for_odoo() {
            print_step "Configurando PostgreSQL para Odoo..."
            
            # Crear usuario de base de datos
            sudo -u postgres createuser -s $ODOO_USER 2>/dev/null || true
            
            # Configurar autenticaci√≥n en pg_hba.conf
            PG_VERSION=$(sudo -u postgres psql -t -c "SELECT version();" | grep -oP '\d+\.\d+' | head -1)
            PG_HBA_FILE="/etc/postgresql/$PG_VERSION/main/pg_hba.conf"
            
            print_message "Configurando autenticaci√≥n en $PG_HBA_FILE..."
            
            # Hacer backup del archivo original
            cp $PG_HBA_FILE ${PG_HBA_FILE}.backup
            
            # Configurar autenticaci√≥n trust para conexiones locales
            sed -i "s/local   all             all                                     peer/local   all             all                                     trust/" $PG_HBA_FILE
            sed -i "s/host    all             all             127.0.0.1\/32            scram-sha-256/host    all             all             127.0.0.1\/32            trust/" $PG_HBA_FILE
            sed -i "s/host    all             all             127.0.0.1\/32            md5/host    all             all             127.0.0.1\/32            trust/" $PG_HBA_FILE
            sed -i "s/host    all             all             ::1\/128                 scram-sha-256/host    all             all             ::1\/128                 trust/" $PG_HBA_FILE
            sed -i "s/host    all             all             ::1\/128                 md5/host    all             all             ::1\/128                 trust/" $PG_HBA_FILE
            
            # Reiniciar PostgreSQL para aplicar cambios
            systemctl restart postgresql
            
            # Verificar que la conexi√≥n funciona
            print_message "Verificando conexi√≥n a PostgreSQL..."
            if sudo -u $ODOO_USER psql -h localhost -p 5432 -U $ODOO_USER postgres -c "\q" 2>/dev/null; then
                print_message "Conexi√≥n a PostgreSQL verificada correctamente"
            else
                print_warning "Problema con la conexi√≥n a PostgreSQL, pero continuando..."
            fi
            
            print_message "PostgreSQL configurado para Odoo"
        }

        # Funci√≥n para crear usuario del sistema para Odoo
        create_odoo_system_user() {
            print_step "Creando usuario del sistema para Odoo..."
            
            useradd -m -d $ODOO_HOME -U -r -s /bin/bash $ODOO_USER 2>/dev/null || true
            
            print_message "Usuario del sistema creado"
        }

        # Funci√≥n para instalar Odoo desde fuente
        install_odoo_from_source() {
            print_step "Descargando e instalando Odoo 18 desde fuente..."
            
            # Crear directorio de instalaci√≥n
            mkdir -p $ODOO_HOME
            cd $ODOO_HOME
            
            # Clonar repositorio de Odoo
            if [[ ! -d "$ODOO_HOME/odoo" ]]; then
                sudo -u $ODOO_USER git clone --depth 1 --branch $ODOO_VERSION https://github.com/odoo/odoo.git
            fi
            
            # Crear entorno virtual
            sudo -u $ODOO_USER python3 -m venv $ODOO_HOME/odoo-venv
            
            # Activar entorno virtual e instalar dependencias
            cd $ODOO_HOME/odoo
            sudo -u $ODOO_USER bash -c "source $ODOO_HOME/odoo-venv/bin/activate && pip install --upgrade pip setuptools wheel"
            sudo -u $ODOO_USER bash -c "source $ODOO_HOME/odoo-venv/bin/activate && pip install -r requirements.txt"
            
            # Crear directorios necesarios
            mkdir -p $ODOO_LOG_DIR
            mkdir -p $ODOO_DATA_DIR
            mkdir -p /etc/odoo
            
            # Cambiar permisos
            chown -R $ODOO_USER:$ODOO_USER $ODOO_HOME
            chown -R $ODOO_USER:$ODOO_USER $ODOO_LOG_DIR
            chown -R $ODOO_USER:$ODOO_USER $ODOO_DATA_DIR
            
            print_message "Odoo 18 instalado desde fuente"
        }

        # Funci√≥n para crear archivo de configuraci√≥n de Odoo
        create_odoo_config() {
            print_step "Creando archivo de configuraci√≥n de Odoo..."
            
            cat > $ODOO_CONFIG_FILE << EOF
        [options]
        ; This is the password that allows database operations:
        admin_passwd = admin123
        db_host = localhost
        db_port = 5432
        db_user = $ODOO_USER
        db_password = False
        addons_path = $ODOO_HOME/odoo/addons
        data_dir = $ODOO_DATA_DIR
        logfile = $ODOO_LOG_DIR/odoo.log
        log_level = info
        xmlrpc_port = $ODOO_PORT
        longpolling_port = $ODOO_LONGPOLL_PORT
        workers = 2
        max_cron_threads = 1
        without_demo = True
        list_db = True
        proxy_mode = False
        server_wide_modules = base,web
        EOF
            
            chown $ODOO_USER:$ODOO_USER $ODOO_CONFIG_FILE
            chmod 640 $ODOO_CONFIG_FILE
            
            print_message "Archivo de configuraci√≥n creado"
        }

        # Funci√≥n para crear servicio systemd
        create_systemd_service() {
            print_step "Creando servicio systemd para Odoo..."
            
            cat > /etc/systemd/system/odoo.service << EOF
        [Unit]
        Description=Odoo 18 Community
        Documentation=https://www.odoo.com
        After=network.target postgresql.service
        Wants=postgresql.service

        [Service]
        Type=simple
        SyslogIdentifier=odoo
        PermissionsStartOnly=true
        User=$ODOO_USER
        Group=$ODOO_USER
        ExecStart=$ODOO_HOME/odoo-venv/bin/python $ODOO_HOME/odoo/odoo-bin -c $ODOO_CONFIG_FILE
        StandardOutput=journal+console
        Restart=always
        RestartSec=10
        KillMode=mixed
        Environment=PATH=$ODOO_HOME/odoo-venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

        [Install]
        WantedBy=multi-user.target
        EOF
            
            systemctl daemon-reload
            systemctl enable odoo
            
            print_message "Servicio systemd creado y habilitado"
        }

        # Funci√≥n para configurar supervisor como alternativa
        configure_supervisor() {
            print_step "Configurando supervisor para Odoo..."
            
            cat > /etc/supervisor/conf.d/odoo.conf << EOF
        [program:odoo]
        command=$ODOO_HOME/odoo-venv/bin/python $ODOO_HOME/odoo/odoo-bin -c $ODOO_CONFIG_FILE
        directory=$ODOO_HOME/odoo
        user=$ODOO_USER
        autostart=true
        autorestart=true
        stdout_logfile=$ODOO_LOG_DIR/odoo.log
        stderr_logfile=$ODOO_LOG_DIR/odoo.log
        environment=PATH="$ODOO_HOME/odoo-venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        EOF
            
            systemctl restart supervisor
            systemctl enable supervisor
            
            print_message "Supervisor configurado para Odoo"
        }

        # Funci√≥n para configurar firewall
        configure_firewall() {
            print_step "Configurando firewall local..."
            
            if command -v ufw &> /dev/null; then
                ufw --force enable
                ufw allow $ODOO_PORT/tcp
                ufw allow $ODOO_LONGPOLL_PORT/tcp
                ufw allow ssh
                print_message "Firewall configurado con ufw"
            else
                print_warning "UFW no est√° disponible"
            fi
        }

        # Funci√≥n para crear script de informaci√≥n
        create_info_script() {
            print_step "Creando script de informaci√≥n..."
            
            cat > /usr/local/bin/odoo-info << 'EOF'
        #!/bin/bash
        echo "==============================================="
        echo "ODOO 18 COMMUNITY - INFORMACI√ìN DEL SISTEMA"
        echo "==============================================="
        echo
        echo "Estado del servicio:"
        systemctl status odoo --no-pager -l
        echo
        echo "√öltimos logs:"
        journalctl -u odoo -n 10 --no-pager
        echo
        echo "Puertos abiertos:"
        netstat -tlnp | grep -E ':(8069|8072|5432)'
        echo
        echo "Informaci√≥n de conexi√≥n:"
        echo "  - IP Externa: $(curl -s http://checkip.amazonaws.com/ || echo 'No disponible')"
        echo "  - URL Odoo: http://$(curl -s http://checkip.amazonaws.com/):8069"
        echo "  - Usuario admin: admin"
        echo "  - Contrase√±a master: admin123"
        echo
        echo "==============================================="
        EOF
            
            chmod +x /usr/local/bin/odoo-info
            
            print_message "Script de informaci√≥n creado en /usr/local/bin/odoo-info"
        }

        # Funci√≥n para mostrar informaci√≥n final
        show_final_info() {
            print_step "Informaci√≥n de la instalaci√≥n:"
            echo
            echo "==============================================="
            echo "ODOO 18 COMMUNITY - INSTALACI√ìN COMPLETADA"
            echo "==============================================="
            echo
            echo "Configuraci√≥n:"
            echo "  - Usuario Odoo: $ODOO_USER"
            echo "  - Directorio de instalaci√≥n: $ODOO_HOME"
            echo "  - Archivo de configuraci√≥n: $ODOO_CONFIG_FILE"
            echo "  - Directorio de logs: $ODOO_LOG_DIR"
            echo "  - Puerto HTTP: $ODOO_PORT"
            echo "  - Puerto Long Polling: $ODOO_LONGPOLL_PORT"
            echo
            echo "Comandos √∫tiles:"
            echo "  - Iniciar Odoo: systemctl start odoo"
            echo "  - Parar Odoo: systemctl stop odoo"
            echo "  - Reiniciar Odoo: systemctl restart odoo"
            echo "  - Ver logs: journalctl -u odoo -f"
            echo "  - Ver estado: systemctl status odoo"
            echo "  - Ver informaci√≥n: odoo-info"
            echo
            echo "Acceso web:"
            EXTERNAL_IP=$(curl -s http://checkip.amazonaws.com/ || echo "IP_NO_DISPONIBLE")
            echo "  - URL: http://$EXTERNAL_IP:$ODOO_PORT"
            echo "  - Usuario admin: admin"
            echo "  - Contrase√±a master: admin123"
            echo
            echo "==============================================="
            echo
            
            # Crear archivo de estado
            echo "INSTALLATION_COMPLETE" > /tmp/odoo-install-status
            echo "$(date): Instalaci√≥n completada" >> /tmp/odoo-install-status
            echo "URL: http://$EXTERNAL_IP:$ODOO_PORT" >> /tmp/odoo-install-status
        }

        # Funci√≥n de verificaci√≥n de salud
        health_check() {
            print_step "Verificando salud del sistema..."
            
            # Verificar PostgreSQL
            if systemctl is-active --quiet postgresql; then
                print_message "PostgreSQL est√° activo"
            else
                print_error "PostgreSQL no est√° activo"
                return 1
            fi
            
            # Verificar Odoo
            if systemctl is-active --quiet odoo; then
                print_message "Odoo est√° activo"
            else
                print_error "Odoo no est√° activo"
                return 1
            fi
            
            # Verificar puertos
            if netstat -tlnp | grep -q ":$ODOO_PORT "; then
                print_message "Puerto $ODOO_PORT est√° abierto"
            else
                print_warning "Puerto $ODOO_PORT no est√° abierto"
            fi
            
            return 0
        }

        # Funci√≥n principal
        main() {
            print_message "Iniciando instalaci√≥n de Odoo 18 Community..."
            print_message "Log de instalaci√≥n: $LOG_FILE"
            
            detect_os
            check_root
            update_system
            install_basic_dependencies
            install_postgresql
            create_odoo_system_user
            configure_postgresql_for_odoo
            install_odoo_from_source
            create_odoo_config
            create_systemd_service
            configure_supervisor
            configure_firewall
            create_info_script
            
            # Iniciar Odoo
            print_step "Iniciando servicio Odoo..."
            systemctl start odoo
            
            # Esperar un momento para que inicie
            sleep 10
            
            # Verificar salud
            if health_check; then
                print_message "Sistema verificado correctamente"
            else
                print_error "Error en la verificaci√≥n del sistema"
            fi
            
            show_final_info
            
            print_message "¬°Instalaci√≥n completada! Odoo 18 Community est√° listo para usar."
            print_message "Ejecuta 'odoo-info' para ver el estado del sistema"
        }

        # Ejecutar funci√≥n principal
        main "$@"
        SCRIPT_EOF
        
        chmod +x /tmp/install_odoo.sh
        
        echo "üìù Script de instalaci√≥n creado y listo para usar"
        echo "üìä Contenido del script:"
        echo "  - Instalaci√≥n automatizada de Odoo 18"
        echo "  - Configuraci√≥n de PostgreSQL"
        echo "  - Configuraci√≥n de firewall"
        echo "  - Logging detallado"
        echo "  - Verificaci√≥n de salud"
        echo "  - Script de informaci√≥n del sistema"

    - name: üñ•Ô∏è Create VM Instance
      run: |
        INSTANCE_NAME="${{ steps.generate_name.outputs.INSTANCE_NAME }}"
        
        echo "üèóÔ∏è Creando instancia: $INSTANCE_NAME"
        gcloud compute instances create $INSTANCE_NAME \
          --project=${{ env.PROJECT_ID }} \
          --zone=${{ github.event.inputs.zone }} \
          --machine-type=${{ github.event.inputs.machine_type }} \
          --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=default \
          --maintenance-policy=MIGRATE \
          --provisioning-model=STANDARD \
          --service-account=${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }} \
          --scopes=https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append \
          --tags=odoo-server,http-server,https-server \
          --image-family=ubuntu-2204-lts \
          --image-project=ubuntu-os-cloud \
          --boot-disk-size=${{ github.event.inputs.disk_size }} \
          --boot-disk-type=pd-balanced \
          --boot-disk-device-name=$INSTANCE_NAME \
          --no-shielded-secure-boot \
          --shielded-vtpm \
          --shielded-integrity-monitoring \
          --labels=environment=production,application=odoo,created-by=github-actions \
          --reservation-affinity=any \
          --metadata-from-file startup-script=/tmp/install_odoo.sh \
          --metadata "instance-name=$INSTANCE_NAME,deployment-time=$(date -u +"%Y-%m-%dT%H:%M:%SZ"),github-actor=${{ github.actor }},auto-delete-hours=${{ github.event.inputs.auto_delete }}"

    - name: üî• Create firewall rules
      run: |
        # Regla para Odoo (puerto 8069)
        gcloud compute firewall-rules create allow-odoo-${{ github.run_number }} \
          --project=${{ env.PROJECT_ID }} \
          --direction=INGRESS \
          --priority=1000 \
          --network=default \
          --action=ALLOW \
          --rules=tcp:8069,tcp:8072 \
          --source-ranges=0.0.0.0/0 \
          --target-tags=odoo-server \
          --description="Allow Odoo access on ports 8069 and 8072" 2>/dev/null || \
        gcloud compute firewall-rules create allow-odoo \
          --project=${{ env.PROJECT_ID }} \
          --direction=INGRESS \
          --priority=1000 \
          --network=default \
          --action=ALLOW \
          --rules=tcp:8069,tcp:8072 \
          --source-ranges=0.0.0.0/0 \
          --target-tags=odoo-server \
          --description="Allow Odoo access on ports 8069 and 8072" 2>/dev/null || echo "Firewall rule already exists"
        
        # Regla para SSH (si no existe)
        gcloud compute firewall-rules create allow-ssh \
          --project=${{ env.PROJECT_ID }} \
          --direction=INGRESS \
          --priority=1000 \
          --network=default \
          --action=ALLOW \
          --rules=tcp:22 \
          --source-ranges=0.0.0.0/0 \
          --target-tags=odoo-server \
          --description="Allow SSH access" 2>/dev/null || echo "SSH firewall rule already exists"

    - name: ‚è±Ô∏è Wait for instance startup
      run: |
        INSTANCE_NAME="${{ steps.generate_name.outputs.INSTANCE_NAME }}"
        
        echo "‚è≥ Esperando que la instancia est√© lista..."
        
        # Esperar a que la instancia est√© corriendo
        for i in {1..60}; do
          STATUS=$(gcloud compute instances describe $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --format="get(status)")
          if [[ "$STATUS" == "RUNNING" ]]; then
            echo "‚úÖ Instancia est√° corriendo"
            break
          fi
          echo "‚è≥ Esperando... ($i/60) - Estado: $STATUS"
          sleep 5
        done
        
        # Esperar a que SSH est√© disponible
        echo "üîó Verificando conectividad SSH..."
        EXTERNAL_IP=$(gcloud compute instances describe $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
        
        for i in {1..30}; do
          if gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --command="echo 'SSH OK'" --ssh-flag="-o ConnectTimeout=10" &>/dev/null; then
            echo "‚úÖ SSH est√° disponible"
            break
          fi
          echo "‚è≥ Esperando SSH... ($i/30)"
          sleep 10
        done

    - name: üîç Monitor installation progress
      run: |
        INSTANCE_NAME="${{ steps.generate_name.outputs.INSTANCE_NAME }}"
        
        echo "üìä Monitoreando progreso de la instalaci√≥n..."
        
        # Monitorear por 15 minutos m√°ximo
        for i in {1..30}; do
          echo "üîç Verificando progreso... ($i/30)"
          
          # Verificar si la instalaci√≥n est√° completa
          if gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --command="test -f /tmp/odoo-install-status && echo 'COMPLETE'" --ssh-flag="-o ConnectTimeout=10" 2>/dev/null | grep -q "COMPLETE"; then
            echo "‚úÖ ¬°Instalaci√≥n completada!"
            
            # Mostrar informaci√≥n de la instalaci√≥n
            echo "üìã Informaci√≥n de la instalaci√≥n:"
            gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --command="cat /tmp/odoo-install-status" --ssh-flag="-o ConnectTimeout=10" 2>/dev/null || echo "No se pudo obtener informaci√≥n"
            
            # Verificar que Odoo est√© corriendo
            if gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --command="systemctl is-active odoo" --ssh-flag="-o ConnectTimeout=10" 2>/dev/null | grep -q "active"; then
              echo "‚úÖ Odoo est√° activo y funcionando"
            else
              echo "‚ö†Ô∏è Odoo podr√≠a no estar activo a√∫n"
            fi
            
            break
          fi
          
          # Mostrar progreso del startup script
          echo "üìù √öltimas l√≠neas del log de instalaci√≥n:"
          gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --command="tail -n 5 /var/log/odoo-install.log 2>/dev/null || echo 'Log no disponible a√∫n'" --ssh-flag="-o ConnectTimeout=10" 2>/dev/null || echo "No se pudo conectar"
          
          sleep 30
        done

    - name: üìä Get instance details and final status
      run: |
        INSTANCE_NAME="${{ steps.generate_name.outputs.INSTANCE_NAME }}"
        
        echo "üéâ Despliegue completado!"
        echo "üìç Detalles de la instancia:"
        gcloud compute instances describe $INSTANCE_NAME \
          --zone=${{ github.event.inputs.zone }} \
          --format="table(name,status,machineType.basename(),scheduling.preemptible.yesno(yes='Yes',no='No'):label=PREEMPTIBLE,networkInterfaces[0].accessConfigs[0].natIP:label=EXTERNAL_IP,disks[0].diskSizeGb)"
        
        echo ""
        echo "üåê Informaci√≥n de conexi√≥n:"
        EXTERNAL_IP=$(gcloud compute instances describe $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
        echo "IP Externa: $EXTERNAL_IP"
        
        echo ""
        echo "üè∑Ô∏è Informaci√≥n del despliegue:"
        echo "Nombre generado: $INSTANCE_NAME"
        echo "Nombre base: ${{ steps.generate_name.outputs.BASE_NAME }}"
        echo "Desplegado por: ${{ github.actor }}"
        echo "Fecha: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "Zona: ${{ github.event.inputs.zone }}"
        echo "Tipo de m√°quina: ${{ github.event.inputs.machine_type }}"
        echo "Tama√±o de disco: ${{ github.event.inputs.disk_size }}GB"
        
        echo ""
        echo "üîó URLs y accesos:"
        echo "Odoo Web: http://$EXTERNAL_IP:8069"
        echo "Long Polling: http://$EXTERNAL_IP:8072"
        echo "SSH: gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }}"
        
        echo ""
        echo "üìã Credenciales por defecto:"
        echo "  - Master Password: admin123"
        echo "  - Database: (crear nueva en primer acceso)"
        echo "  - Usuario inicial: admin"
        echo "  - Contrase√±a: (configurar en primer acceso)"
        
        echo ""
        echo "üîß Comandos √∫tiles:"
        echo "Ver estado: gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --command='odoo-info'"
        echo "Ver logs: gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --command='journalctl -u odoo -f'"
        echo "Reiniciar: gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --command='sudo systemctl restart odoo'"
        
        echo ""
        echo "üóëÔ∏è Limpieza:"
        echo "Eliminar instancia: gcloud compute instances delete $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --quiet"
        echo "Eliminar regla firewall: gcloud compute firewall-rules delete allow-odoo-${{ github.run_number }} --quiet"
        
        echo ""
        echo "üìà Verificaci√≥n final:"
        
        # Verificar estado de la instancia
        INSTANCE_STATUS=$(gcloud compute instances describe $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --format="get(status)")
        echo "Estado de la instancia: $INSTANCE_STATUS"
        
        # Verificar conectividad HTTP
        echo "üîç Verificando conectividad HTTP..."
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 http://$EXTERNAL_IP:8069 || echo "000")
        if [[ "$HTTP_STATUS" == "200" || "$HTTP_STATUS" == "303" ]]; then
          echo "‚úÖ Odoo est√° respondiendo (HTTP $HTTP_STATUS)"
        else
          echo "‚ö†Ô∏è Odoo no responde a√∫n (HTTP $HTTP_STATUS) - Podr√≠a estar iniciando"
        fi
        
        # Verificar logs de instalaci√≥n
        echo "üìù Estado de la instalaci√≥n:"
        gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --command="if [ -f /tmp/odoo-install-status ]; then echo '‚úÖ Instalaci√≥n completada'; cat /tmp/odoo-install-status; else echo '‚ö†Ô∏è Instalaci√≥n en progreso o fallida'; fi" --ssh-flag="-o ConnectTimeout=10" 2>/dev/null || echo "No se pudo verificar el estado"
        
        echo ""
        echo "üöÄ ¬°Despliegue finalizado!"
        echo "‚è∞ Nota: Si Odoo no responde inmediatamente, espera 2-3 minutos adicionales para que termine de iniciar."

    - name: üïê Setup auto-deletion (if requested)
      if: ${{ github.event.inputs.auto_delete != '0' }}
      run: |
        INSTANCE_NAME="${{ steps.generate_name.outputs.INSTANCE_NAME }}"
        AUTO_DELETE_HOURS="${{ github.event.inputs.auto_delete }}"
        
        echo "‚è∞ Configurando auto-eliminaci√≥n en $AUTO_DELETE_HOURS horas..."
        
        # Calcular tiempo de eliminaci√≥n
        DELETE_TIME=$(date -d "+$AUTO_DELETE_HOURS hours" -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Crear script de auto-eliminaci√≥n
        cat > /tmp/auto_delete.sh << EOF
        #!/bin/bash
        echo "üóëÔ∏è Eliminaci√≥n autom√°tica programada para: $DELETE_TIME"
        echo "Instancia: $INSTANCE_NAME"
        echo "Zona: ${{ github.event.inputs.zone }}"
        
        # Esperar hasta el tiempo programado
        while true; do
          CURRENT_TIME=\$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          if [[ "\$CURRENT_TIME" > "$DELETE_TIME" ]]; then
            echo "üóëÔ∏è Tiempo de eliminaci√≥n alcanzado, eliminando instancia..."
            gcloud compute instances delete $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --quiet
            gcloud compute firewall-rules delete allow-odoo-${{ github.run_number }} --quiet 2>/dev/null || true
            echo "‚úÖ Instancia eliminada autom√°ticamente"
            break
          fi
          sleep 300  # Verificar cada 5 minutos
        done
        EOF
        
        chmod +x /tmp/auto_delete.sh
        
        # Copiar script a la instancia y ejecutar en background
        gcloud compute scp /tmp/auto_delete.sh $INSTANCE_NAME:/tmp/auto_delete.sh --zone=${{ github.event.inputs.zone }}
        gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --command="nohup /tmp/auto_delete.sh > /tmp/auto_delete.log 2>&1 &"
        
        echo "‚úÖ Auto-eliminaci√≥n configurada para $DELETE_TIME"
        echo "üìã La instancia se eliminar√° autom√°ticamente en $AUTO_DELETE_HOURS horas"

    - name: üìä Create deployment summary
      run: |
        INSTANCE_NAME="${{ steps.generate_name.outputs.INSTANCE_NAME }}"
        EXTERNAL_IP=$(gcloud compute instances describe $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
        
        echo "## üöÄ Resumen del Despliegue de Odoo 18" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Informaci√≥n General" >> $GITHUB_STEP_SUMMARY
        echo "| Campo | Valor |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Instancia** | \`$INSTANCE_NAME\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **IP Externa** | \`$EXTERNAL_IP\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Zona** | \`${{ github.event.inputs.zone }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Tipo de M√°quina** | \`${{ github.event.inputs.machine_type }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Tama√±o de Disco** | \`${{ github.event.inputs.disk_size }}GB\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Desplegado por** | \`${{ github.actor }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Fecha** | \`$(date -u +"%Y-%m-%d %H:%M:%S UTC")\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Accesos" >> $GITHUB_STEP_SUMMARY
        echo "- **Odoo Web Interface**: [http://$EXTERNAL_IP:8069](http://$EXTERNAL_IP:8069)" >> $GITHUB_STEP_SUMMARY
        echo "- **Long Polling**: [http://$EXTERNAL_IP:8072](http://$EXTERNAL_IP:8072)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîë Credenciales" >> $GITHUB_STEP_SUMMARY
        echo "- **Master Password**: \`admin123\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Database**: Crear nueva en primer acceso" >> $GITHUB_STEP_SUMMARY
        echo "- **Usuario Admin**: \`admin\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Contrase√±a**: Configurar en primer acceso" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üõ†Ô∏è Comandos √ötiles" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Conectar por SSH" >> $GITHUB_STEP_SUMMARY
        echo "gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Ver informaci√≥n del sistema" >> $GITHUB_STEP_SUMMARY
        echo "odoo-info" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Ver logs de Odoo" >> $GITHUB_STEP_SUMMARY
        echo "journalctl -u odoo -f" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Reiniciar Odoo" >> $GITHUB_STEP_SUMMARY
        echo "sudo systemctl restart odoo" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Eliminar instancia" >> $GITHUB_STEP_SUMMARY
        echo "gcloud compute instances delete $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --quiet" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ github.event.inputs.auto_delete }}" != "0" ]]; then
          echo "### ‚è∞ Auto-eliminaci√≥n" >> $GITHUB_STEP_SUMMARY
          echo "La instancia se eliminar√° autom√°ticamente en **${{ github.event.inputs.auto_delete }} horas**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        echo "### üìå Notas Importantes" >> $GITHUB_STEP_SUMMARY
        echo "- ‚è∞ Odoo puede tardar 2-3 minutos adicionales en estar completamente disponible" >> $GITHUB_STEP_SUMMARY
        echo "- üîí Cambia la contrase√±a maestra en producci√≥n" >> $GITHUB_STEP_SUMMARY
        echo "- üìä Monitorea el uso de recursos seg√∫n tu carga de trabajo" >> $GITHUB_STEP_SUMMARY
        echo "- üîß Personaliza la configuraci√≥n seg√∫n tus necesidades" >> $GITHUB_STEP_SUMMARY
        
        echo "‚úÖ Resumen del despliegue creado en el tab 'Summary' del workflow"
