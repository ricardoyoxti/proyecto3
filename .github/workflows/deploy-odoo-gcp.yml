# .github/workflows/deploy-odoo-gcp.yml
name: 🚀 Deploy Odoo 18 to Google Cloud

on:
  workflow_dispatch:
    inputs:
      instance_name:
        description: 'Nombre base de la instancia (se añadirá timestamp único)'
        required: false
        default: 'odoo'
      machine_type:
        description: 'Tipo de máquina'
        required: true
        default: 'e2-small'
        type: choice
        options:
          - 'e2-micro'
          - 'e2-small'
          - 'e2-medium'
          - 'e2-standard-2'
          - 'e2-standard-4'
      zone:
        description: 'Zona de GCP'
        required: true
        default: 'us-central1-a'
        type: choice
        options:
          - 'southamerica-west1-a'
          - 'us-central1-a'
      disk_size:
        description: 'Tamaño del disco (GB)'
        required: true
        default: '10'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ☁️ Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: 🏷️ Generate instance name
        id: generate_name
        run: |
          BASE_NAME="${{ github.event.inputs.instance_name }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          INSTANCE_NAME="${BASE_NAME}-${TIMESTAMP}"

          if [[ ! $INSTANCE_NAME =~ ^[a-z0-9-]+$ ]]; then
            echo "❌ Nombre inválido"
            exit 1
          fi

          echo "INSTANCE_NAME=$INSTANCE_NAME" >> $GITHUB_OUTPUT
          echo "BASE_NAME=$BASE_NAME" >> $GITHUB_OUTPUT
          echo "Instancia generada: $INSTANCE_NAME"

      - name: 🖥️ Create VM Instance
        run: |
          INSTANCE_NAME="${{ steps.generate_name.outputs.INSTANCE_NAME }}"

          echo "🏗️ Generando script de instalación..."
          cat > startup-script.sh << 'EOF'
          #!/bin/bash
          set -euxo pipefail
          exec > /var/log/startup-script.log 2>&1

          echo "[INFO] Iniciando instalación automatizada de Odoo 18..."

          apt update && apt upgrade -y
          apt install -y wget curl git sudo python3-dev python3-pip python3-venv \
              build-essential libxml2-dev libxslt1-dev zlib1g-dev libsasl2-dev libldap2-dev \
              libjpeg-dev libpq-dev libpng-dev libevent-dev libfreetype6-dev \
              node-less npm fontconfig libfontconfig1 wkhtmltopdf

          curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor -o /usr/share/keyrings/postgresql-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/postgresql-keyring.gpg] http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list

          apt update
          apt install -y postgresql-15 postgresql-client-15

          systemctl enable postgresql
          systemctl start postgresql

          useradd -m -d /opt/odoo -U -r -s /bin/bash odoo || true
          sudo -u postgres createuser -s odoo || true

          ODOO_HOME="/opt/odoo"
          sudo -u odoo git clone --depth 1 --branch 18.0 https://github.com/odoo/odoo.git $ODOO_HOME/odoo
          sudo -u odoo python3 -m venv $ODOO_HOME/odoo-venv
          sudo -u odoo bash -c "source $ODOO_HOME/odoo-venv/bin/activate && pip install --upgrade pip wheel && pip install -r $ODOO_HOME/odoo/requirements.txt"

          mkdir -p /etc/odoo /var/log/odoo /var/lib/odoo
          chown -R odoo:odoo /etc/odoo /var/log/odoo /var/lib/odoo $ODOO_HOME

          cat > /etc/odoo/odoo.conf << CFG
          [options]
          admin_passwd = admin
          db_host = False
          db_port = False
          db_user = odoo
          db_password = False
          addons_path = $ODOO_HOME/odoo/addons
          logfile = /var/log/odoo/odoo.log
          log_level = info
          xmlrpc_port = 8069
          longpolling_port = 8072
          workers = 2
          CFG

          cat > /etc/systemd/system/odoo.service << SRV
          [Unit]
          Description=Odoo 18
          After=network.target postgresql.service
          Wants=postgresql.service

          [Service]
          Type=simple
          User=odoo
          ExecStart=$ODOO_HOME/odoo-venv/bin/python3 $ODOO_HOME/odoo/odoo-bin -c /etc/odoo/odoo.conf
          Restart=always

          [Install]
          WantedBy=multi-user.target
          SRV

          systemctl daemon-reexec
          systemctl daemon-reload
          systemctl enable odoo
          systemctl start odoo

          echo "[INFO] Instalación completa. Odoo está corriendo."
          EOF

          echo "Creando instancia: $INSTANCE_NAME"
          gcloud compute instances create "$INSTANCE_NAME" \
            --project="${{ env.PROJECT_ID }}" \
            --zone="${{ github.event.inputs.zone }}" \
            --machine-type="${{ github.event.inputs.machine_type }}" \
            --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=default \
            --maintenance-policy=MIGRATE \
            --provisioning-model=STANDARD \
            --service-account="${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}" \
            --scopes="https://www.googleapis.com/auth/cloud-platform" \
            --tags=odoo-server,http-server,https-server \
            --image-family=ubuntu-2204-lts \
            --image-project=ubuntu-os-cloud \
            --boot-disk-size="${{ github.event.inputs.disk_size }}" \
            --boot-disk-type=pd-balanced \
            --boot-disk-device-name="$INSTANCE_NAME" \
            --no-shielded-secure-boot \
            --shielded-vtpm \
            --shielded-integrity-monitoring \
            --labels=environment=production,application=odoo,created-by=github-actions \
            --reservation-affinity=any \
            --metadata=startup-script="$(< startup-script.sh)"

      - name: 🔥 Create firewall rules
        run: |
          gcloud compute firewall-rules create allow-odoo-${{ github.run_number }} \
            --project=${{ env.PROJECT_ID }} \
            --direction=INGRESS \
            --priority=1000 \
            --network=default \
            --action=ALLOW \
            --rules=tcp:8069 \
            --source-ranges=0.0.0.0/0 \
            --target-tags=odoo-server \
            --description="Allow Odoo access on port 8069" || echo "Regla ya existe"

          gcloud compute firewall-rules create allow-ssh \
            --project=${{ env.PROJECT_ID }} \
            --direction=INGRESS \
            --priority=1000 \
            --network=default \
            --action=ALLOW \
            --rules=tcp:22 \
            --source-ranges=0.0.0.0/0 \
            --target-tags=odoo-server \
            --description="Allow SSH access" || echo "Regla ya existe"

      - name: 📊 Get instance details
        run: |
          INSTANCE_NAME="${{ steps.generate_name.outputs.INSTANCE_NAME }}"
          echo "🎉 Instancia creada exitosamente!"

          EXTERNAL_IP=$(gcloud compute instances describe $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
          echo "🌐 IP externa: $EXTERNAL_IP"
          echo "🔗 Odoo: http://$EXTERNAL_IP:8069"
          echo "💻 SSH: gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }}"

          echo ""
          echo "⏳ La instalación puede tardar algunos minutos. Puedes revisar el progreso con:"
          echo "gcloud compute ssh $INSTANCE_NAME --zone=${{ github.event.inputs.zone }} --command='sudo tail -f /var/log/startup-script.log'"
